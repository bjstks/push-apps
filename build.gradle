buildscript {
    ext.kotlin_version = '1.1.4'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.1.RELEASE"
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply from: "$rootProject.rootDir/version.gradle"


mainClassName = 'pushapps.MainKt'
jar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'http://repo.spring.io/snapshot'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'com.beust:jcommander:1.72'
    compile 'org.cloudfoundry:cloudfoundry-client-reactor:2.13.0.RELEASE'
    compile 'org.cloudfoundry:cloudfoundry-operations:2.13.0.RELEASE'
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.7.1-2'
    compile 'org.slf4j:slf4j-simple:1.7.25'

    compile 'io.projectreactor:reactor-core'
    compile 'io.projectreactor.ipc:reactor-netty'

    testCompile "io.damo.aspen:aspen:2.0.0"
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"
    testCompile 'org.assertj:assertj-core:3.8.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

task version {
    println "$version"
}

task buildHelloApp(type: Exec) {
    environment GOOS: "linux", GOPATH: "${System.getenv("HOME")}/workspace/go"
    workingDir "${project.rootDir}/src/test/kotlin/support/helloapp"
    commandLine "go", "build", "-o", "helloapp"
}

task packageHelloApp(type: Zip) {
    dependsOn "buildHelloApp"

    from "${project.rootDir}/src/test/kotlin/support/helloapp"
    include "*"
    archiveName "helloapp.zip"
    destinationDir file("${project.rootDir}/src/test/kotlin/support")
}

task buildGoodbyeApp(type: Exec) {
    environment GOOS: "linux", GOPATH: "${System.getenv("HOME")}/workspace/go"
    workingDir "${project.rootDir}/src/test/kotlin/support/goodbyeapp"
    commandLine "go", "build", "-o", "goodbyeapp"
}

task packageGoodbyeApp(type: Zip) {
    dependsOn "buildGoodbyeApp"

    from "${project.rootDir}/src/test/kotlin/support/goodbyeapp"
    include "*"
    archiveName "goodbyeapp.zip"
    destinationDir file("${project.rootDir}/src/test/kotlin/support")
}

task buildSampleApps {
    dependsOn "packageHelloApp", "packageGoodbyeApp"
}

task bumpPatch(type: UpdatePatchVersionTask) {
    versionFilePath = "$rootProject.rootDir/version.gradle"
}

test {
    dependsOn "assemble"
    dependsOn "buildSampleApps"
    environment([
        "PUSHAPPS_VERSION": "$version"
    ])
    testLogging {
        exceptionFormat = 'full'
    }
}

class UpdatePatchVersionTask extends DefaultTask {
    @Input
    String versionFilePath


    @TaskAction
    def updatePatchVersion() {
        def versionFile = new File(versionFilePath)
        def currentVersion = versionFile.text
        println("**********")
        println(currentVersion)
        def versionStringParts = currentVersion.split("\\.")
        println(versionStringParts)
        def patchInt = Integer.parseInt(versionStringParts.last().replace("'\n", ""))
        versionStringParts[versionStringParts.size() - 1] = (patchInt + 1).toString() + "'\n"

        versionFile.text = versionStringParts.join(".")
    }
}